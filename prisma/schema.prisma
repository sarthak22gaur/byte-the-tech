// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Blog {
  id          String        @id @default(cuid())
  title       String        @unique
  description String        @db.MediumText
  author      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  tags        String?       
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?
  BlogContent BlogContent[]
  comments    Comment[]
}

model BlogContent {
  id          String @id @default(cuid())
  headerImage String
  content     String @db.LongText
  Blog        Blog   @relation(fields: [blogId], references: [id])
  blogId      String
}

model Comment {
  id        String   @id @default(cuid())
  message   String   @db.LongText
  createdAt DateTime @default(now())
  createdBy String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  accounts      Account[]
  sessions      Session[]
  blogs         Blog[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  MEMBER
  USER
}
